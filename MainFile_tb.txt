LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY MainFile_tb IS
END MainFile_tb;
 
ARCHITECTURE behavior OF MainFile_tb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT AdaptiveFilter
    PORT(
         x : IN  std_logic_vector(7 downto 0);
         w : IN  std_logic_vector(7 downto 0);
         d : IN  std_logic_vector(7 downto 0);
         w1 : INOUT  std_logic_vector(7 downto 0);
         w2 : INOUT  std_logic_vector(7 downto 0);
         Y1 : INOUT  std_logic_vector(7 downto 0);
         Y2 : INOUT  std_logic_vector(7 downto 0);
         E1 : INOUT  std_logic_vector(7 downto 0);
         E2 : INOUT  std_logic_vector(7 downto 0)
        );
    END COMPONENT;
    

   --Inputs
   signal x : std_logic_vector(7 downto 0) := (others => '0');
   signal w : std_logic_vector(7 downto 0) := (others => '0');
   signal d : std_logic_vector(7 downto 0) := (others => '0');

	--BiDirs
   signal w1 : std_logic_vector(7 downto 0);
   signal w2 : std_logic_vector(7 downto 0);
   signal Y1 : std_logic_vector(7 downto 0);
   signal Y2 : std_logic_vector(7 downto 0);
   signal E1 : std_logic_vector(7 downto 0);
   signal E2 : std_logic_vector(7 downto 0);
   -- No clocks detected in port list. Replace <clock> below with 
   -- appropriate port name 
 
--   constant <clock>_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: AdaptiveFilter PORT MAP (
          x => x,
          w => w,
          d => d,
          w1 => w1,
          w2 => w2,
          Y1 => Y1,
          Y2 => Y2,
          E1 => E1,
          E2 => E2
        );

   -- Clock process definitions
 --  <clock>_process :process
   --begin
		--<clock> <= '0';
		--wait for <clock>_period/2;
		--<clock> <= '1';
		--wait for <clock>_period/2;
   --end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
      wait for 100 ns;	

     -- wait for <clock>_period*10;

      -- insert stimulus here 
		w<="00000000";
      x<="11110000";
		d<="10101010";
      wait;
   end process;

END;
